---
name: Rolling Release

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-x64
            runner: ubuntu-latest
            shell: bash
          - name: ubuntu-arm64
            runner: ubuntu-24.04-arm
            shell: bash
          - name: macos-x64
            runner: macos-13
            shell: bash
          - name: macos-arm64
            runner: macos-14
            shell: bash
          - name: windows-arm64
            runner: windows-11-arm
            shell: powershell
          - name: windows-x64
            runner: windows-latest
            shell: powershell
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check recent releases
        id: check_releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          SINCE="$(python3 -c 'from datetime import datetime, timedelta; print((datetime.utcnow() - timedelta(hours=24)).strftime("%Y-%m-%dT%H:%M:%SZ"))')"
          COUNT=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100" \
            | jq "[.[] | select(.created_at >= \"$SINCE\")] | length")
          echo "releases_last24h=$COUNT" >> "$GITHUB_OUTPUT"
          if [ "$COUNT" -ge 2 ]; then
            echo "skip_build=true" >> "$GITHUB_OUTPUT"
          else
            echo "skip_build=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Skip build when release limit reached
        if: steps.check_releases.outputs.skip_build == 'true'
        run: |
          echo 'Skipping build: daily release threshold reached.'

      - name: Set up C++ build environment
        if: steps.check_releases.outputs.skip_build != 'true'
        uses: aminya/setup-cpp@v1

      - name: Install dependencies (*nix)
        if: steps.check_releases.outputs.skip_build != 'true' && runner.os != 'Windows'
        shell: bash
        run: ./scripts/install_deps.sh
      - name: Install dependencies (Windows)
        if: steps.check_releases.outputs.skip_build != 'true' && runner.os == 'Windows'
        shell: powershell
        run: scripts/install_deps.bat

      - name: Install lint tools
        if: steps.check_releases.outputs.skip_build != 'true'
        run: pip install cpplint

      - name: Configure (Windows)
        if: steps.check_releases.outputs.skip_build != 'true' && runner.os == 'Windows'
        shell: powershell
        run: |
          if "%PROCESSOR_ARCHITECTURE%"=="ARM64" (
            cmake -S . -B build -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release -DCODEX_FORCE_NO_NSEC=ON -A ARM64
          ) else (
            cmake -S . -B build -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release -DCODEX_FORCE_NO_NSEC=ON
          )
      - name: Configure (*nix)
        if: steps.check_releases.outputs.skip_build != 'true' && runner.os != 'Windows'
        shell: bash
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCODEX_FORCE_NO_NSEC=ON
      - name: Build
        if: steps.check_releases.outputs.skip_build != 'true'
        shell: bash
        run: cmake --build build --config Release -j
      - name: Run tests
        if: steps.check_releases.outputs.skip_build != 'true'
        shell: bash
        run: ctest --test-dir build -C Release -R autogitpull_tests --output-on-failure || true
      - name: Copy artifact to dist
        if: steps.check_releases.outputs.skip_build != 'true'
        shell: bash
        run: |
          mkdir -p dist/${{ matrix.name }}
          if [ "${{ runner.os }}" = "Windows" ]; then
            cp build/Release/autogitpull.exe dist/${{ matrix.name }}/autogitpull.exe || true
          else
            cp build/autogitpull dist/${{ matrix.name }}/autogitpull || true
          fi
      - name: Upload artifact
        if: steps.check_releases.outputs.skip_build != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: autogitpull-${{ matrix.name }}
          path: dist/${{ matrix.name }}/*

      - name: Build
        if: steps.check_releases.outputs.skip_build != 'true'
        run: make

      - name: Run Tests
        if: steps.check_releases.outputs.skip_build != 'true'
        run: make test

      - name: Get next rolling tag
        if: steps.check_releases.outputs.skip_build != 'true'
        id: rolling_tag
        run: |
          TODAY=$(date +'%Y.%m.%d')
          git fetch --tags
          LAST=$(git tag --list "${TODAY}-*" | grep -E "^${TODAY}-[0-9]+$" | sed "s/^${TODAY}-//" | sort -n | tail -1)
          if [ -z "$LAST" ]; then
            NEXT="${TODAY}-1"
          else
            NEXT_NUM=$((LAST + 1))
            NEXT="${TODAY}-${NEXT_NUM}"
          fi
          echo "NEXT_TAG=$NEXT" >> $GITHUB_ENV
          echo "Rolling tag: $NEXT"

      - name: Tag commit
        if: steps.check_releases.outputs.skip_build != 'true'
        shell: bash
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag "$NEXT_TAG"
          git push origin "$NEXT_TAG"

  publish:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    needs: build-test-release
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEXT_TAG }}
          name: Rolling Release ${{ env.NEXT_TAG }}
          body: Automated rolling release for ${{ env.NEXT_TAG }}
          draft: false
          prerelease: true
          files: |
            dist/**/autogitpull*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
