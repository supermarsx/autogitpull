---
name: Release

on:
  push:
    tags:
      - 'v*'
      - '*/release'
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag name to publish assets to (e.g., v0.1.0)'
        required: false
        default: ''

permissions:
  contents: write

concurrency:
  # Ensure only one release per tag (or input) runs at a time
  group: ${{ github.workflow }}-${{ inputs.release_tag || github.ref_name || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: build (${{ matrix.name }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-x64
            runner: ubuntu-latest
            shell: bash
            cmake_arch: x86_64
          - name: ubuntu-arm64
            runner: ubuntu-24.04-arm
            shell: bash
            cmake_arch: aarch64
          - name: macos-x64
            runner: macos-13
            shell: bash
            cmake_arch: x86_64
          - name: macos-arm64
            runner: macos-14
            shell: bash
            cmake_arch: arm64
          - name: windows-x64
            runner: windows-latest
            shell: powershell
            cmake_arch: x64
          - name: windows-arm64
            runner: windows-11-arm
            shell: powershell
            cmake_arch: arm64
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up C++ build environment
        uses: aminya/setup-cpp@v1
      - name: Enable ccache
        if: runner.os != 'Windows'
        uses: hendrikmuhs/ccache-action@v1.2.19
        with:
          key: ${{ runner.os }}-release-ccache-${{ github.ref_name }}
      - name: Cache CMake dependencies
        uses: actions/cache@v4
        with:
          path: build/**/_deps
          key: ${{ runner.os }}-cmake-${{ hashFiles('CMakeLists.txt', 'cmake/**', '**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cmake-
      - name: Configure (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        env:
          CMAKE_CXX_COMPILER_LAUNCHER: ccache
        run: |
          set -euo pipefail
          if [[ "${RUNNER_OS}" == "Linux" ]]; then
            export CC=gcc CXX=g++
          else
            export CC=clang CXX=clang++
          fi
          # Sanitize inherited flags that can break host builds
          unset CFLAGS CXXFLAGS LDFLAGS
          cmake --preset release -DCMAKE_EXE_LINKER_FLAGS_RELEASE=-s -DUSE_NTLMCLIENT=OFF
      - name: Build (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: cmake --build --preset release --parallel
      - name: Configure (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $arch = '${{ matrix.cmake_arch }}'
          $generatorArgs = if ($arch -eq 'arm64') { '-A ARM64' } else { '-A x64' }
          cmake -S . -B build -G "Visual Studio 17 2022" $generatorArgs -DCMAKE_BUILD_TYPE=Release -DUSE_NTLMCLIENT=OFF -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON
      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: cmake --build build --config Release --parallel
      - name: Stage artifact (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          DEST="dist/${{ matrix.name }}"
          mkdir -p "$DEST"
          # Locate the built binary; presets place it under build/release/$(uname)
          BIN_FILE="$(find build -type f -name autogitpull -print -quit)"
          if [[ -z "${BIN_FILE}" ]]; then
            echo "Could not locate built autogitpull binary under build/" >&2
            find build -maxdepth 4 -type f -printf "  %p\n" || true
            exit 1
          fi
          install -m 755 "${BIN_FILE}" "$DEST/autogitpull-${{ matrix.name }}"
          install -m 644 readme.md "$DEST/README.md"
          install -m 644 license.md "$DEST/LICENSE.md"
      - name: Stage artifact (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $dest = "dist/${{ matrix.name }}"
          New-Item -ItemType Directory -Force -Path $dest | Out-Null
          Copy-Item -Path "build/Release/autogitpull.exe" -Destination (Join-Path $dest 'autogitpull-${{ matrix.name }}.exe') -Force
          Copy-Item -Path readme.md -Destination (Join-Path $dest 'README.md') -Force
          Copy-Item -Path license.md -Destination (Join-Path $dest 'LICENSE.md') -Force
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: autogitpull-${{ matrix.name }}
          path: dist/${{ matrix.name }}/*

  release:
    name: create-release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Resolve release tag
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.release_tag }}" ]; then
            echo "TAG_NAME=${{ inputs.release_tag }}" >> "$GITHUB_ENV"
          elif [[ "${GITHUB_REF:-${{ github.ref }}}" == refs/tags/* ]]; then
            ref_tag="${GITHUB_REF#refs/tags/}"
            # Fallback for older runners
            if [ -z "$ref_tag" ]; then ref_tag="${{ github.ref_name }}"; fi
            echo "TAG_NAME=$ref_tag" >> "$GITHUB_ENV"
          else
            echo "No tag context and no release_tag input supplied" >&2
            exit 1
          fi
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: List artifacts
        run: ls -R dist
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            dist/**/autogitpull-*
