---
name: Release

on:
  push:
    tags:
      - 'v*'
      - '*/release'
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: build (${{ matrix.name }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-x64
            runner: ubuntu-latest
            shell: bash
          - name: ubuntu-arm64
            runner: ubuntu-24.04-arm
            shell: bash
          - name: macos-x64
            runner: macos-13
            shell: bash
          - name: macos-arm64
            runner: macos-14
            shell: bash
          - name: windows-x64
            runner: windows-latest
            shell: powershell
          - name: windows-arm64
            runner: windows-11-arm
            shell: powershell
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up C++ build environment
        uses: aminya/setup-cpp@v1
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: scripts/install_deps.bat
      - name: Install dependencies (*nix)
        if: runner.os != 'Windows'
        shell: bash
        run: ./scripts/install_deps.sh
      - name: Configure (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          if "%PROCESSOR_ARCHITECTURE%"=="ARM64" (
            cmake -S . -B build -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release -DUSE_NTLMCLIENT=OFF -A ARM64
          ) else (
            cmake -S . -B build -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release -DUSE_NTLMCLIENT=OFF
          )
      - name: Configure (*nix)
        if: runner.os != 'Windows'
        shell: bash
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DUSE_NTLMCLIENT=OFF
      - name: Build
        shell: bash
        run: cmake --build build --config Release -j
      - name: Copy artifact to dist
        shell: bash
        run: |
          mkdir -p dist/${{ matrix.name }}
          if [ "${{ runner.os }}" = "Windows" ]; then
            cp build/Release/autogitpull.exe dist/${{ matrix.name }}/autogitpull.exe || true
          else
            cp build/autogitpull dist/${{ matrix.name }}/autogitpull || true
          fi
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: autogitpull-${{ matrix.name }}
          path: dist/${{ matrix.name }}/*

  release:
    name: create-release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: List artifacts
        run: ls -R dist
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/autogitpull*
