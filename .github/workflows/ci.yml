---
name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  format:
    name: format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: aminya/setup-cpp@v1
      - name: Install deps
        shell: bash
        run: bash scripts/install_deps.sh
      - name: Run clang-format script
        shell: bash
        run: cmake -DPROJECT_ROOT=. -DACTION=fix -P scripts/clang_format.cmake
      - name: Commit formatting changes (push events)
        if: github.event_name == 'push' && github.ref_protected != 'true' && github.repository == github.event.repository.full_name
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --staged --quiet; then
            echo "No formatting changes to commit."
          else
            git commit -m "chore(format): auto-apply clang-format"
            git push
          fi
      - name: Upload format patch (PRs)
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          if ! git diff --quiet; then
            git diff > format.patch
            echo "Formatting changes required. Uploaded patch artifact."
          fi
        continue-on-error: true
      - name: Upload patch artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: format-patch
          path: format.patch
          if-no-files-found: ignore

  lint:
    name: lint
    runs-on: ubuntu-latest
    needs: format
    steps:
      - uses: actions/checkout@v4
      - uses: aminya/setup-cpp@v1
      - name: Install deps
        shell: bash
        run: bash scripts/install_deps.sh
      - name: Lint (cpplint)
        shell: bash
        run: cmake -DPROJECT_ROOT=. -P scripts/run_cpplint.cmake

  test:
    name: test
    runs-on: ubuntu-latest
    needs: [format, lint]
    steps:
      - uses: actions/checkout@v4
      - uses: aminya/setup-cpp@v1
      - name: Clean build directory
        shell: bash
        run: rm -rf build
      - name: Configure
        shell: bash
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
      - name: Build
        shell: bash
        run: cmake --build build --config Release -j
      - name: Run tests (ours)
        shell: bash
        run: ctest --test-dir build -C Release -R autogitpull_tests --output-on-failure

  build:
    name: build (${{ matrix.name }})
    runs-on: ${{ matrix.runner }}
    needs: [format, lint, test]
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-x64
            runner: ubuntu-latest
            shell: bash
            generator: "Unix Makefiles"
          - name: ubuntu-arm64
            runner: ubuntu-24.04-arm64
            shell: bash
            generator: "Unix Makefiles"
          - name: macos-x64
            runner: macos-13
            shell: bash
            generator: "Unix Makefiles"
          - name: macos-arm64
            runner: macos-14
            shell: bash
            generator: "Unix Makefiles"
          - name: windows-x64
            runner: windows-latest
            shell: powershell
            generator: "Visual Studio 17 2022"
    steps:
      - uses: actions/checkout@v4
      - uses: aminya/setup-cpp@v1
      - name: Clean build directory
        if: runner.os != 'Windows'
        shell: bash
        run: rm -rf build
      - name: Configure (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: cmake -S . -B build -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=Release
      - name: Configure (*nix)
        if: runner.os != 'Windows'
        shell: bash
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
      - name: Build
        shell: bash
        run: cmake --build build --config Release -j
