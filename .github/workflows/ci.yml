name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  format:
    name: format (${{ matrix.name }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { name: ubuntu-x64, runner: ubuntu-latest, shell: bash }
          - { name: ubuntu-arm64, runner: ubuntu-24.04-arm64, shell: bash }
          - { name: macos-x64, runner: macos-13, shell: bash }
          - { name: macos-arm64, runner: macos-14, shell: bash }
          - { name: windows-x64, runner: windows-latest, shell: powershell }
    steps:
      - uses: actions/checkout@v4
      - uses: aminya/setup-cpp@v1
      - name: Install deps
        shell: ${{ matrix.shell }}
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then scripts/install_deps.bat; else bash scripts/install_deps.sh; fi
      - name: Run clang-format script
        shell: ${{ matrix.shell }}
        run: cmake -DPROJECT_ROOT=. -DACTION=fix -P scripts/clang_format.cmake && git diff --exit-code

  lint:
    name: lint (${{ matrix.name }})
    runs-on: ${{ matrix.runner }}
    needs: format
    strategy:
      fail-fast: false
      matrix:
        include:
          - { name: ubuntu-x64, runner: ubuntu-latest, shell: bash }
          - { name: ubuntu-arm64, runner: ubuntu-24.04-arm64, shell: bash }
          - { name: macos-x64, runner: macos-13, shell: bash }
          - { name: macos-arm64, runner: macos-14, shell: bash }
          - { name: windows-x64, runner: windows-latest, shell: powershell }
    steps:
      - uses: actions/checkout@v4
      - uses: aminya/setup-cpp@v1
      - name: Install deps
        shell: ${{ matrix.shell }}
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then scripts/install_deps.bat; else bash scripts/install_deps.sh; fi
      - name: Lint (cpplint)
        shell: ${{ matrix.shell }}
        run: cmake -DPROJECT_ROOT=. -P scripts/run_cpplint.cmake

  test:
    name: test (${{ matrix.name }})
    runs-on: ${{ matrix.runner }}
    needs: [format, lint]
    strategy:
      fail-fast: false
      matrix:
        include:
          - { name: ubuntu-x64, runner: ubuntu-latest, shell: bash, generator: "Unix Makefiles" }
          - { name: ubuntu-arm64, runner: ubuntu-24.04-arm64, shell: bash, generator: "Unix Makefiles" }
          - { name: macos-x64, runner: macos-13, shell: bash, generator: "Unix Makefiles" }
          - { name: macos-arm64, runner: macos-14, shell: bash, generator: "Unix Makefiles" }
          - { name: windows-x64, runner: windows-latest, shell: powershell, generator: "Visual Studio 17 2022" }
    steps:
      - uses: actions/checkout@v4
      - uses: aminya/setup-cpp@v1
      - name: Configure
        shell: ${{ matrix.shell }}
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then \
            cmake -S . -B build -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=Release; \
          else \
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release; \
          fi
      - name: Build
        shell: ${{ matrix.shell }}
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then \
            cmake --build build --config Release -j; \
          else \
            cmake --build build --config Release -j; \
          fi
      - name: Run tests (ours)
        shell: ${{ matrix.shell }}
        run: ctest --test-dir build -C Release -R autogitpull_tests --output-on-failure

  build:
    name: build (${{ matrix.name }})
    runs-on: ${{ matrix.runner }}
    needs: [format, lint, test]
    strategy:
      fail-fast: false
      matrix:
        include:
          - { name: ubuntu-x64, runner: ubuntu-latest, shell: bash, generator: "Unix Makefiles" }
          - { name: ubuntu-arm64, runner: ubuntu-24.04-arm64, shell: bash, generator: "Unix Makefiles" }
          - { name: macos-x64, runner: macos-13, shell: bash, generator: "Unix Makefiles" }
          - { name: macos-arm64, runner: macos-14, shell: bash, generator: "Unix Makefiles" }
          - { name: windows-x64, runner: windows-latest, shell: powershell, generator: "Visual Studio 17 2022" }
    steps:
      - uses: actions/checkout@v4
      - uses: aminya/setup-cpp@v1
      - name: Configure
        shell: ${{ matrix.shell }}
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then \
            cmake -S . -B build -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=Release; \
          else \
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release; \
          fi
      - name: Build
        shell: ${{ matrix.shell }}
        run: cmake --build build --config Release -j
